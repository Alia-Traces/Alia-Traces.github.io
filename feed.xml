<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://alia-traces.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://alia-traces.github.io/" rel="alternate" type="text/html" /><updated>2020-08-29T05:55:10-05:00</updated><id>https://alia-traces.github.io/feed.xml</id><title type="html">Alia’s artefacts</title><subtitle>Blessedly cursed code: realtime rendering, path tracing and demoscene. Maybe other stuff, who knows.</subtitle><entry><title type="html">Organising your workflow with tab groups in Xcode 12</title><link href="https://alia-traces.github.io/xcode/ios/mac/tools/2020/08/29/xcode-12-tabs.html" rel="alternate" type="text/html" title="Organising your workflow with tab groups in Xcode 12" /><published>2020-08-29T00:00:00-05:00</published><updated>2020-08-29T00:00:00-05:00</updated><id>https://alia-traces.github.io/xcode/ios/mac/tools/2020/08/29/xcode-12-tabs</id><content type="html" xml:base="https://alia-traces.github.io/xcode/ios/mac/tools/2020/08/29/xcode-12-tabs.html">&lt;p&gt;&lt;img src=&quot;/images/xcode_tabs/hierarchy.png&quot; alt=&quot;Two levels of tab bar for tab grouping&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Xcode 12 has an all new tab system. Here’s how I use it to organise my workflow!
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;window-tabs-document-tabs-tabs-vs-spaces&quot;&gt;Window tabs, document tabs, tabs vs. spaces…&lt;/h2&gt;

&lt;p&gt;This really confused me at first. There are now 2 different types of tab: window and document. These appear on 2 seperate tab bars, one under the other… it looks weird but it’s &lt;em&gt;great&lt;/em&gt; for organising your workflow!&lt;/p&gt;

&lt;p&gt;Here’s how I use it.&lt;/p&gt;

&lt;h3 id=&quot;window-tabs&quot;&gt;Window tabs&lt;/h3&gt;

&lt;p&gt;At the top, I organise my work by topic using window tabs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode_tabs/window_tabs.png&quot; alt=&quot;Window tabs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It makes more sense to think of window tabs as folders, and under each folder you can keep a bunch of documents open. I tend to split things up something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Project&lt;/strong&gt; for the project settings, info.plist, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UI&lt;/strong&gt; for interface related files&lt;/li&gt;
  &lt;li&gt;Code files for whatever I’m working on currently&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt; for debugging so the debugger doesn’t mess with my active editor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course you can use whatever setup suits you.&lt;/p&gt;

&lt;h3 id=&quot;document-tabs&quot;&gt;Document tabs&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode_tabs/document_tabs.png&quot; alt=&quot;Document tabs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Under the window tabs, I use document tabs to keep all files I’m working on open. This lets me switch quickly between files, and the hierarchy of Window and Document tabs keeps things organised, so I can have 50 tabs open but still be able to find what I’m after quickly.&lt;/p&gt;

&lt;h2 id=&quot;how-to-set-it-up&quot;&gt;How to set it up&lt;/h2&gt;

&lt;h3 id=&quot;window-tabs-1&quot;&gt;Window tabs&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Turn on the Window Tab Bar&lt;/strong&gt; from the View menu, if it’s not already visible:
&lt;img src=&quot;/images/xcode_tabs/tab_bar_menu.jpg&quot; alt=&quot;Turn on the window tab bar&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Add a few tabs&lt;/strong&gt; with the + button at the end of the window tab bar, as many as you need.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rename the tabs&lt;/strong&gt;. You can use the Window menu (Rename Window Tab) or press ⌥⇧⌘t.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;document-tabs-1&quot;&gt;Document tabs&lt;/h3&gt;

&lt;p&gt;There’s an important thing to know when you open a file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Single-clicking&lt;/strong&gt; a file will open it &lt;em&gt;temporarily&lt;/em&gt;. If you click on a different file, it’ll open it in the same tab.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Double-clicking&lt;/strong&gt; a file makes it &lt;em&gt;permanent&lt;/em&gt;. If you click on another file, it’ll open in a new tab, keeping the first document open.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is really handy: double click to open files you’re actively working on, and you’ll quickly have a useful set of tabs. When you just need a file open briefly and won’t come back to it, single click.&lt;/p&gt;

&lt;p&gt;You can change this in the prefs, under Navigation.&lt;/p&gt;

&lt;h2 id=&quot;a-little-debug-tab-magic&quot;&gt;A little Debug tab magic&lt;/h2&gt;

&lt;p&gt;It’s frustrating to run your code, then hit a breakpoint or crash and have Xcode switch to another file and start the debugger, causing you to lose your place and your window layout.&lt;/p&gt;

&lt;p&gt;You can fix this! Use the Behaviours preferences to tell Xcode to switch to the Debug tab when it pauses, or when the build fails:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode_tabs/debug_behaviours.png&quot; alt=&quot;Configuring debug behaviour&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can set this up for failed tests, frame capture etc. when you want it to switch to the Debug tab too.&lt;/p&gt;</content><author><name></name></author><category term="xcode" /><category term="ios" /><category term="mac" /><category term="tools" /><summary type="html">Xcode 12 has an all new tab system. Here’s how I use it to organise my workflow!</summary></entry><entry><title type="html">Reconstruction (4KB Executable Graphics)</title><link href="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/07/24/reconstruction.html" rel="alternate" type="text/html" title="Reconstruction (4KB Executable Graphics)" /><published>2020-07-24T05:46:20-05:00</published><updated>2020-07-24T05:46:20-05:00</updated><id>https://alia-traces.github.io/demoscene/metal/pathtracing/2020/07/24/reconstruction</id><content type="html" xml:base="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/07/24/reconstruction.html">&lt;p&gt;&lt;img src=&quot;/images/reconstruction/Screenshot.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Released at FieldFX 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://demozoo.org/graphics/281254/&quot;&gt;Download on Demozoo&lt;/a&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;glass-rendering&quot;&gt;Glass rendering&lt;/h3&gt;

&lt;p&gt;I’ve always loved the way glass refracts and reflects, and rendering it is sooooo much fun.&lt;/p&gt;

&lt;p&gt;So, lots of glass. I havent done any comparisons, but my path tracer should produce pretty realistic results - it handles fresnel reflections, refraction, internal relection etc. There are a few sphere lights around the scene to produce caustics.&lt;/p&gt;

&lt;p&gt;My last few pieces have been a bit heavy, resulting in a noisy image. I wanted to make something fast this time, so I could push quality in other ways, so instead of an SDF / raymarching setup I went with pure analytic intersections (i.e. calculate which object the ray will hit and jump directly there, instead of marching into the scene in a loop).&lt;/p&gt;

&lt;p&gt;The downside: you’re stuck with simple geometry (or triangle based meshes - but that has its own set of problems).&lt;/p&gt;

&lt;p&gt;So, I decided to stick with spheres, and for interest slice them up.&lt;/p&gt;

&lt;h3 id=&quot;meaning&quot;&gt;Meaning&lt;/h3&gt;

&lt;p&gt;Having some meaning in a piece is important to me, and with only slices of spheres to play with it needed to be abstract.&lt;/p&gt;

&lt;p&gt;I went with a transgender theme again (indicated by the colours - the stripes in the marble form a trans flag).&lt;/p&gt;

&lt;p&gt;On the left, an initial pile of glass - interesting, but wrong. In the middle, the true shape is understood, and the order has been established. Finally, the parts come together in a cohesive whole, and a perfect sphere is formed.&lt;/p&gt;

&lt;p&gt;This reflects the transformation process the identity goes through in some transgender people: recognising that the shape of the self is wrong, figuring out the true identity, and reconstruction in the true form.&lt;/p&gt;

&lt;h3 id=&quot;breakdown&quot;&gt;Breakdown&lt;/h3&gt;

&lt;p&gt;Starting with the stage and lighting, I initially added a floor, a back wall (which is glossy so there’s some reflected light) and a couple of lights. This is a zoomed out view, with the floor set to checkerboard to make it easier to see what’s going on:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reconstruction/Lighting.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Depth of Field is actually turned right down, but I have another camera setting that makes the edges of the image out of focus - with a wider lens it becomes much more obvious than in the final image.&lt;/p&gt;

&lt;p&gt;Zooming back in, the basic layout plan was to have 3 spheres:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reconstruction/Layout.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally I took each sphere and split it into 5 slices, and moved the pieces about a bit.&lt;/p&gt;

&lt;p&gt;This is the raw output from the renderer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reconstruction/post1.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The final stage is colour grading, because I got my grading code working for this one :D I only used about 30% of the controls in the end, since it didn’t need much else.&lt;/p&gt;

&lt;p&gt;My process for colour grading is to switch to YUV colour space (a single mat3 multiply), then work on luma and chroma seperately, then back to RGB.&lt;/p&gt;

&lt;p&gt;The first step is to increase saturation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reconstruction/post_saturation.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I applied a cyan tint to remove the pink tint in the image. This lets the light colour shine through (see how the wall is more pink and the floor is more blue - the ambient colour is set to blue sky, red horizon):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reconstruction/post_main_tint.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I shifted the tint further into blue/green in the shadows, which looks like it’s gone too far:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reconstruction/post_shadow_tint.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But when the highlights are shifted more towards orange it balances that and gives a nice tonal range across the whole image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reconstruction/post_highlight_tint.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last thing I want to mention is the important of lots of light bounces with glass. Because there are so many potential paths through the surface (reflection or refraction at the surface, reflection or refraction at the exit, paths that hit multiple glass surfaces, and paths that take many internal reflections…) it’s essential to allow a large number of bounces per ray.&lt;/p&gt;

&lt;p&gt;I settled on 25 in the end, here’s a video showing what happens as the bounce count goes from 2-25:&lt;/p&gt;

&lt;div&gt;
	&lt;video controls=&quot;&quot; loop=&quot;&quot; style=&quot;min-width: 100%;&quot;&gt;
	&lt;source type=&quot;video/mp4&quot; src=&quot;/images/reconstruction/light_bounces.mp4&quot; /&gt;
	&lt;source type=&quot;video/webm&quot; src=&quot;/images/reconstruction/eclipse.webm&quot; /&gt;
	&lt;/video&gt;
&lt;/div&gt;</content><author><name></name></author><category term="demoscene" /><category term="metal" /><category term="pathtracing" /><summary type="html">Released at FieldFX 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data). Download on Demozoo</summary></entry><entry><title type="html">How to use Metal frame capture outside of Xcode</title><link href="https://alia-traces.github.io/metal/tools/xcode/2020/07/18/adding-framecapture-outside-of-xcode.html" rel="alternate" type="text/html" title="How to use Metal frame capture outside of Xcode" /><published>2020-07-18T05:46:20-05:00</published><updated>2020-07-18T05:46:20-05:00</updated><id>https://alia-traces.github.io/metal/tools/xcode/2020/07/18/adding-framecapture-outside-of-xcode</id><content type="html" xml:base="https://alia-traces.github.io/metal/tools/xcode/2020/07/18/adding-framecapture-outside-of-xcode.html">&lt;p&gt;Some time ago I wrote my own live shader editor for Metal shaders - MetalToy, named after ShaderToy, since I wanted something like shadertoy for Metal. It’s basic but very useful - I can edit shaders in any editor (I use Xcode), hit cmd-s to save and MetalToy will update the live preview.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MetalToyUI.jpg&quot; alt=&quot;MetalToy's user interface&quot; /&gt;&lt;br /&gt;&lt;em&gt;MetalToy looks like this&lt;/em&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;At some point I’ll clean it up and open source it, but here’s something that might be of use to other mac / iOS devs. Yesterday I was trying to fix a bug in a shader, and I thought&lt;/p&gt;

&lt;h3 id=&quot;itd-be-so-good-to-have-a-debug-button-that-fires-up-a-full-shader-debugger&quot;&gt;&lt;em&gt;“It’d be so good to have a ‘Debug’ button that fires up a full shader debugger”&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;It took around 20 minutes to do it :D&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MetalToyDebugButton.jpg&quot; alt=&quot;MetalToy with a shiny new debug button&quot; /&gt;&lt;br /&gt;&lt;em&gt;One shiny new Debug button&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;dont-build-your-own-gpu-debugger&quot;&gt;Don’t build your own GPU debugger&lt;/h2&gt;

&lt;p&gt;Unless you really want to I guess? Xcode already has some amazing GPU debugging and profiling tools built in, and you can simply hit the frame capture button while debugging your app. This only works if you’re debugging it though.&lt;/p&gt;

&lt;p&gt;What I needed was a way to run frame capture outside of Xcode. Turns out Apple anticipated this nicely!&lt;/p&gt;

&lt;p&gt;For full details, you can see &lt;a href=&quot;https://developer.apple.com/documentation/metal/frame_capture_debugging_tools/enabling_frame_capture&quot;&gt;Apple’s documentation here&lt;/a&gt;. Since their docs have a habit of, uh, moving, disappearing or not being updated, I’ll document the process here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In your project’s info.plist add the key “MetalCaptureEnabled”, set it to true&lt;/li&gt;
  &lt;li&gt;Add code to capture GPU commands. See &lt;a href=&quot;https://developer.apple.com/documentation/metal/frame_capture_debugging_tools/capturing_gpu_command_data_programmatically#3325255&quot;&gt;Apple’s docs on writing frame captures to a file here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my case I added a ‘Debug’ button. This pauses my MTKView (which just makes things simpler), starts capturing, calls view.draw() and ends. It save a .gputrace (frame capture) file to disk, then asks Xcode to open the file.&lt;/p&gt;

&lt;p&gt;That means I can just hit the Debug button at any time in MetalToy and it fires up the full Xcode GPU debugging tools :D&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MetalToyGPUDebug.jpg&quot; alt=&quot;The shader in Xcode's GPU debugger&quot; /&gt;&lt;br /&gt;&lt;em&gt;A click of a button, and we have a full shader debugger!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;very-useful-for-remote-debugging&quot;&gt;VERY useful for remote debugging&lt;/h2&gt;

&lt;p&gt;You could also just write the file out and send it to your own server, or ask the customer to email it.&lt;/p&gt;

&lt;p&gt;Have a customer who’s seeing an unusual bug you can’t reproduce? Now they can just hit a button, and it’ll send you a frame capture so you can reproduce it instantly.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;Here’s what I did - the Debug button just calls this function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;captureFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Stop playback if playing&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;preview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;captureManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTLCaptureManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captureManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;supportsDestination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gpuTraceDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Capture to a GPU tracefile is not supported&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// Write file to tmp folder&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tmpDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temporaryDirectory&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frameCapture.gputrace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// Set up the capture destiptor&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;captureDescriptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTLCaptureDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;captureDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;captureObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtlDev&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;captureDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gpuTraceDocument&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;captureDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destURL&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captureManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startCapture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captureDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to capture frame for debug: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		
	&lt;span class=&quot;c1&quot;&gt;// Draw a frame to capture it&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;preview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		
	&lt;span class=&quot;n&quot;&gt;captureManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stopCapture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		
	&lt;span class=&quot;c1&quot;&gt;// Open the file in xcode&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;standardPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scriptSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tell application &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Xcode&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;open &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standardPath&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)\&quot;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;end tell&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAppleScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scriptSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;XcodeOpen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;qos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concurrent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;autoreleaseFrequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executeAndReturnError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="metal" /><category term="tools" /><category term="xcode" /><summary type="html">Some time ago I wrote my own live shader editor for Metal shaders - MetalToy, named after ShaderToy, since I wanted something like shadertoy for Metal. It’s basic but very useful - I can edit shaders in any editor (I use Xcode), hit cmd-s to save and MetalToy will update the live preview. MetalToy looks like this</summary></entry><entry><title type="html">End of an Era (4KB Executable Graphics)</title><link href="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/07/11/end-of-an-era.html" rel="alternate" type="text/html" title="End of an Era (4KB Executable Graphics)" /><published>2020-07-11T05:46:20-05:00</published><updated>2020-07-11T05:46:20-05:00</updated><id>https://alia-traces.github.io/demoscene/metal/pathtracing/2020/07/11/end-of-an-era</id><content type="html" xml:base="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/07/11/end-of-an-era.html">&lt;p&gt;&lt;img src=&quot;/images/end_of_an_era/Screenshot.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Released at Solskogen 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://demozoo.org/graphics/280517/&quot;&gt;Download on Demozoo&lt;/a&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;where-leaves-fall-in-autumn-flowers-bloom-in-spring&quot;&gt;&lt;em&gt;Where leaves fall in Autumn, flowers bloom in Spring&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Solskogen 2020 was the last ever Solskogen party, and I wanted to make something fitting.&lt;/p&gt;

&lt;p&gt;It was the end of an era, and a time of sadness as well as a really good party. Sunset and Autumn came to mind, and Autumn speaks to me of falling leaves the colour of flames and golden light.&lt;/p&gt;

&lt;p&gt;So, a leaf strewn forest floor, dappled golden sunlight. The final element was the ring - discarded and left in the woods, a symbolic closing gesture.&lt;/p&gt;

&lt;h2 id=&quot;breakdown&quot;&gt;Breakdown&lt;/h2&gt;

&lt;p&gt;Again, I started with the lighting. The ambient light has a green tint, and the main light is quite orange to hint at sunset.&lt;/p&gt;

&lt;p&gt;I placed 2 planes between the scene and the light with holes in to create a dappled light effect (you can see the hole pattern, but with the leaves in places it’s not visible so wasn’t worth changing).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/end_of_an_era/1.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ring is just a stretched torus.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/end_of_an_era/2.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, leaves. I used SDFs for this, with domain repetition to basically make a grid of leaves. Size, shape, colour and rotation are randomised, and they’re given a slight curl.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/end_of_an_era/3.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I then added more layers, with a random rotation and offset, to build the leaf pile.&lt;/p&gt;

&lt;p&gt;Easy, but: the leaves all intersect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/end_of_an_era/4.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had to figure out how to pile leaves up without them overlapping. A physics sim wasn’t viable. Doing this analytically is way beyond my maths level. Time for dirty hacks :D&lt;/p&gt;

&lt;p&gt;Compare this shot with the last one - the leaves are in exactly the same position, but they magically no longer intersect:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/end_of_an_era/5.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How? I built the leaf pile in layers, bottom to top. For each layer, I take the shape of the leaf and use it to clip any geometry above it. This means if there’s a lower leaf intersecting the current one, the part that intersects gets removed. Cheap, hacky, but looks ok 🙃&lt;/p&gt;</content><author><name></name></author><category term="demoscene" /><category term="metal" /><category term="pathtracing" /><summary type="html">Released at Solskogen 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data). Download on Demozoo</summary></entry><entry><title type="html">Cloth!!! (4KB Executable Graphics)</title><link href="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/06/20/cloth.html" rel="alternate" type="text/html" title="Cloth!!! (4KB Executable Graphics)" /><published>2020-06-20T05:46:20-05:00</published><updated>2020-06-20T05:46:20-05:00</updated><id>https://alia-traces.github.io/demoscene/metal/pathtracing/2020/06/20/cloth</id><content type="html" xml:base="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/06/20/cloth.html">&lt;p&gt;&lt;img src=&quot;/images/cloth/screenshot.jpg&quot; alt=&quot;Undefined Symbol screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Released at Nova 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data) with help from Lia-Sae.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://demozoo.org/graphics/279420/&quot;&gt;Download on Demozoo&lt;/a&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-challenge-rendering-realistic-cloth&quot;&gt;The challenge: Rendering realistic cloth&lt;/h2&gt;

&lt;p&gt;I was thinking a lot about materials before I started this, particularly how texture isn’t really a thing when you look close enough: there’s only geometry and material. Texture is how we perceive fine surface details.&lt;/p&gt;

&lt;p&gt;It follows, then, that realistic rendering should use ultra-detailed geometry, not textures.&lt;/p&gt;

&lt;p&gt;I decided to try it, by rendering cloth 🤦‍♀️&lt;/p&gt;

&lt;h2 id=&quot;breakdown&quot;&gt;Breakdown&lt;/h2&gt;

&lt;p&gt;To give the scene some scale, I had to show cloth up close. That ended up being difficult - how to show it nicely and give it scale? I decided to make tiny cloth flags and carpet, and use Lego to give it a sense of scale.&lt;/p&gt;

&lt;p&gt;I started with the lighting. The ambient light has a blue tint and the main light yellow to indicate daytime / sunlight. To provide a visual cue that we’re indoors I added some shadows across the scene, perhaps the wooden frame between window panes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cloth/lighting.jpg&quot; alt=&quot;Lighting setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Getting the lighting right is important - without the main (sun) light, the scene looks drab and flat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cloth/no_light.jpg&quot; alt=&quot;Lighting setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apart from that the scene is quite simple - carpet, 2 flags, some lego blocks.&lt;/p&gt;

&lt;h2 id=&quot;cloth-rendering&quot;&gt;Cloth rendering&lt;/h2&gt;

&lt;p&gt;Here’s how the cloth works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cloth/zoom1.jpg&quot; alt=&quot;Zoomed cloth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cloth/zoom2.jpg&quot; alt=&quot;Zoomed cloth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cloth/zoom3.jpg&quot; alt=&quot;Zoomed cloth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cloth/zoom4.jpg&quot; alt=&quot;Zoomed cloth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s literally just modelled down to fibre level 🙃 With path tracing this is actually viable - with many samples per pixel aliasing is not an issue, and because light bounces around within the threads the lighting and colour is realistic.&lt;/p&gt;

&lt;p&gt;Generating this as a mesh clearly isn’t viable, so this is rendered as a raymarched SDF (signed distance field). In fact only 2 single fibres are drawn - they’re repeated, twisted around themselves to form threads, mirrored and twisted again to form ‘string’ (Lia-Sae will probably tell me that’s the wrong term ;) then repeated and woven together to form cloth.&lt;/p&gt;

&lt;p&gt;This is how it works in cross-section:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; src=&quot;https://www.shadertoy.com/embed/3dSBRK?gui=true&amp;amp;t=10&amp;amp;paused=true&amp;amp;muted=false&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;the-importance-of-light-bounces&quot;&gt;The importance of light bounces&lt;/h3&gt;

&lt;p&gt;Each time the ray bounces, it transmits colour from the surface. This means if a ray bounces multiple times within the cloth, it both increases the brightness of the cloth and also the richness of the colour.&lt;/p&gt;

&lt;p&gt;This turns out to be critical:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cloth/bounces1.jpg&quot; alt=&quot;Effect of light bounces&quot; /&gt;
&lt;br /&gt;&lt;em&gt;5 bounces per sample&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cloth/bounces2.jpg&quot; alt=&quot;Effect of light bounces&quot; /&gt;
&lt;br /&gt;&lt;em&gt;15 bounces per sample&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-downside&quot;&gt;The downside&lt;/h2&gt;

&lt;p&gt;Of course there’s a catch: rendering geometry this fine is &lt;em&gt;expensive&lt;/em&gt;. I optimised this to hell, and it’s still very slow - especially when many light bounces are needed. I think in the end the release version only manages ~12 samples per pixel on my GPU (a Vega 56), which is why it’s a bit noisy…&lt;/p&gt;</content><author><name></name></author><category term="demoscene" /><category term="metal" /><category term="pathtracing" /><summary type="html">Released at Nova 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data) with help from Lia-Sae. Download on Demozoo</summary></entry><entry><title type="html">Ice Core (4KB Executable Graphics)</title><link href="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/05/22/ice-core.html" rel="alternate" type="text/html" title="Ice Core (4KB Executable Graphics)" /><published>2020-05-22T05:46:20-05:00</published><updated>2020-05-22T05:46:20-05:00</updated><id>https://alia-traces.github.io/demoscene/metal/pathtracing/2020/05/22/ice-core</id><content type="html" xml:base="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/05/22/ice-core.html">&lt;p&gt;&lt;img src=&quot;/images/ice_core/ice_core_screenshot.jpg&quot; alt=&quot;Ice Core screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Released at Outline 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://demozoo.org/graphics/278502/&quot;&gt;Download on Demozoo&lt;/a&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;2nd-demoscene-release&quot;&gt;2nd demoscene release&lt;/h2&gt;

&lt;p&gt;I wanted to do something for Outline, but didn’t have a huge amount of time. I had a WIP shader of an ice core to hand, so I quickly put this together. It came last in the competition, but I liked it :)&lt;/p&gt;

&lt;h2 id=&quot;tech&quot;&gt;Tech&lt;/h2&gt;

&lt;p&gt;There’s nothing particularly new here - it’s path traced glass again, but this time with the lighting set up to give nice caustics.&lt;/p&gt;

&lt;p&gt;The ice core is just a glass cylinder sliced into sections. Each section has a random colour and roughness value to produce the varied ice layers.&lt;/p&gt;

&lt;p&gt;There are also bubbles and particles within the ice. The geometry is an SDF, and the one nice trick I came up with here is the dark particles - I used &lt;code class=&quot;highlighter-rouge&quot;&gt;p = fract(p);&lt;/code&gt; to repeat space, then placed a sphere at a random position in each cell.&lt;/p&gt;

&lt;p&gt;Normally it’s important to keep the sphere inside the cell to avoid artefacts, but in this case such artefacts produce dark spots in the ice - which look like floating particles ;)&lt;/p&gt;</content><author><name></name></author><category term="demoscene" /><category term="metal" /><category term="pathtracing" /><summary type="html">Released at Outline 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data). Download on Demozoo</summary></entry><entry><title type="html">Undefined Symbol (4KB Executable Graphics)</title><link href="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/04/12/undefined-symbol.html" rel="alternate" type="text/html" title="Undefined Symbol (4KB Executable Graphics)" /><published>2020-04-12T05:46:20-05:00</published><updated>2020-04-12T05:46:20-05:00</updated><id>https://alia-traces.github.io/demoscene/metal/pathtracing/2020/04/12/undefined-symbol</id><content type="html" xml:base="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/04/12/undefined-symbol.html">&lt;p&gt;&lt;img src=&quot;/images/undefined_symbol/undefined_symbol_screenshot.jpg&quot; alt=&quot;Undefined Symbol screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Released at Revision 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://demozoo.org/graphics/277166/&quot;&gt;Download on Demozoo&lt;/a&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;

&lt;p&gt;This was my first demoscene release as Alia (but not my first scene release :) so I wanted to make something good. I’m fairly happy with how it worked out.&lt;/p&gt;

&lt;p&gt;The general plan was to make something abstract but realistically rendered, with a lot of symbolism. This isn’t something that works well in a demo competition, and it came 11th out of 16 but I want to make interesting art, not win competitions.&lt;/p&gt;

&lt;h2 id=&quot;tech&quot;&gt;Tech&lt;/h2&gt;

&lt;p&gt;It’s GPU path traced, using my own path tracer in a single Metal compute shader. This supports complex materials including glass.&lt;/p&gt;

&lt;p&gt;The executable is written in PyObjC, a highly unpleasant combination of Python and Objective C. Unfortunately there isn’t a good exe compressor for macOS, and this at least works. That fires up Metal, selects a GPU (it uses an eGPU if one is connected), then runs the shader repeatedly to accumulate samples. It stops and displays the picture when 30 seconds is up (the competition rules state 4KB and 30 seconds max).&lt;/p&gt;

&lt;p&gt;The python script is then compressed with gzip, and wrapped in a bash script that unpacks and runs it.&lt;/p&gt;

&lt;h2 id=&quot;symbolism&quot;&gt;Symbolism&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The cactus represents masculinity&lt;/li&gt;
  &lt;li&gt;The vase and flower, femininity&lt;/li&gt;
  &lt;li&gt;The arch above forms a bridge between the two sides&lt;/li&gt;
  &lt;li&gt;The colours in the glass are pink, blue and clear (white… kinda), the colours of the transgender flag&lt;/li&gt;
  &lt;li&gt;The camera looks through an open window - this is a point of view&lt;/li&gt;
  &lt;li&gt;The background objects, a sphere a cube and a torus, represent graphics and the demoscene. Naturally, they’re shiny :)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="demoscene" /><category term="metal" /><category term="pathtracing" /><summary type="html">Released at Revision 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data). Download on Demozoo</summary></entry></feed>