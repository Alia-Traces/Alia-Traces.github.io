<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://alia-traces.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://alia-traces.github.io/" rel="alternate" type="text/html" /><updated>2020-07-18T10:55:15-05:00</updated><id>https://alia-traces.github.io/feed.xml</id><title type="html">Alia’s artefacts</title><subtitle>Thoughts on realtime rendering, path tracing and demoscene. Maybe other stuff, who knows.</subtitle><entry><title type="html">How to use Metal frame capture outside of Xcode</title><link href="https://alia-traces.github.io/metal/tools/xcode/2020/07/18/adding-framecapture-outside-of-xcode.html" rel="alternate" type="text/html" title="How to use Metal frame capture outside of Xcode" /><published>2020-07-18T05:46:20-05:00</published><updated>2020-07-18T05:46:20-05:00</updated><id>https://alia-traces.github.io/metal/tools/xcode/2020/07/18/adding-framecapture-outside-of-xcode</id><content type="html" xml:base="https://alia-traces.github.io/metal/tools/xcode/2020/07/18/adding-framecapture-outside-of-xcode.html">&lt;p&gt;Some time ago I wrote my own live shader editor for Metal shaders - MetalToy, named after ShaderToy, since I wanted something like shadertoy for Metal. It’s basic but very useful - I can edit shaders in any editor (I use Xcode), hit cmd-s to save and MetalToy will update the live preview.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MetalToyUI.jpg&quot; alt=&quot;MetalToy's user interface&quot; /&gt;&lt;br /&gt;&lt;em&gt;MetalToy looks like this&lt;/em&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;At some point I’ll clean it up and open source it, but here’s something that might be of use to other mac / iOS devs. Yesterday I was trying to fix a bug in a shader, and I thought&lt;/p&gt;

&lt;h3 id=&quot;itd-be-so-good-to-have-a-debug-button-that-fires-up-a-full-shader-debugger&quot;&gt;&lt;em&gt;“It’d be so good to have a ‘Debug’ button that fires up a full shader debugger”&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;It took around 20 minutes to do it :D&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MetalToyDebugButton.jpg&quot; alt=&quot;MetalToy with a shiny new debug button&quot; /&gt;&lt;br /&gt;&lt;em&gt;One shiny new Debug button&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;dont-build-your-own-gpu-debugger&quot;&gt;Don’t build your own GPU debugger&lt;/h2&gt;

&lt;p&gt;Unless you really want to I guess? Xcode already has some amazing GPU debugging and profiling tools built in, and you can simply hit the frame capture button while debugging your app. This only works if you’re debugging it though.&lt;/p&gt;

&lt;p&gt;What I needed was a way to run frame capture outside of Xcode. Turns out Apple anticipated this nicely!&lt;/p&gt;

&lt;p&gt;For full details, you can see &lt;a href=&quot;https://developer.apple.com/documentation/metal/frame_capture_debugging_tools/enabling_frame_capture&quot;&gt;Apple’s documentation here&lt;/a&gt;. Since their docs have a habit of, uh, moving, disappearing or not being updated, I’ll document the process here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In your project’s info.plist add the key “MetalCaptureEnabled”, set it to true&lt;/li&gt;
  &lt;li&gt;Add code to capture GPU commands. See &lt;a href=&quot;https://developer.apple.com/documentation/metal/frame_capture_debugging_tools/capturing_gpu_command_data_programmatically#3325255&quot;&gt;Apple’s docs on writing frame captures to a file here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my case I added a ‘Debug’ button. This pauses my MTKView (which just makes things simpler), starts capturing, calls view.draw() and ends. It save a .gputrace (frame capture) file to disk, then asks Xcode to open the file.&lt;/p&gt;

&lt;p&gt;That means I can just hit the Debug button at any time in MetalToy and it fires up the full Xcode GPU debugging tools :D&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MetalToyGPUDebug.jpg&quot; alt=&quot;The shader in Xcode's GPU debugger&quot; /&gt;&lt;br /&gt;&lt;em&gt;A click of a button, and we have a full shader debugger!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;very-useful-for-remote-debugging&quot;&gt;VERY useful for remote debugging&lt;/h2&gt;

&lt;p&gt;You could also just write the file out and send it to your own server, or ask the customer to email it.&lt;/p&gt;

&lt;p&gt;Have a customer who’s seeing an unusual bug you can’t reproduce? Now they can just hit a button, and it’ll send you a frame capture so you can reproduce it instantly.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;Here’s what I did - the Debug button just calls this function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;captureFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Stop playback if playing&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;preview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;captureManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTLCaptureManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captureManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;supportsDestination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gpuTraceDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Capture to a GPU tracefile is not supported&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// Write file to tmp folder&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tmpDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temporaryDirectory&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frameCapture.gputrace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// Set up the capture destiptor&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;captureDescriptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTLCaptureDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;captureDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;captureObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtlDev&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;captureDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gpuTraceDocument&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;captureDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destURL&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captureManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startCapture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captureDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to capture frame for debug: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		
	&lt;span class=&quot;c1&quot;&gt;// Draw a frame to capture it&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;preview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		
	&lt;span class=&quot;n&quot;&gt;captureManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stopCapture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		
	&lt;span class=&quot;c1&quot;&gt;// Open the file in xcode&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;standardPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scriptSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tell application &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Xcode&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;open &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standardPath&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)\&quot;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;end tell&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSAppleScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scriptSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;XcodeOpen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;qos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concurrent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;autoreleaseFrequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executeAndReturnError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="metal" /><category term="tools" /><category term="xcode" /><summary type="html">Some time ago I wrote my own live shader editor for Metal shaders - MetalToy, named after ShaderToy, since I wanted something like shadertoy for Metal. It’s basic but very useful - I can edit shaders in any editor (I use Xcode), hit cmd-s to save and MetalToy will update the live preview. MetalToy looks like this</summary></entry><entry><title type="html">Ice Core (4KB Executable Graphics)</title><link href="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/05/22/ice-core.html" rel="alternate" type="text/html" title="Ice Core (4KB Executable Graphics)" /><published>2020-05-22T05:46:20-05:00</published><updated>2020-05-22T05:46:20-05:00</updated><id>https://alia-traces.github.io/demoscene/metal/pathtracing/2020/05/22/ice-core</id><content type="html" xml:base="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/05/22/ice-core.html">&lt;p&gt;&lt;img src=&quot;/images/ice_core/ice_core_screenshot.jpg&quot; alt=&quot;Ice Core screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Released at Outline 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data).
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;2nd-demoscene-release&quot;&gt;2nd demoscene release&lt;/h2&gt;

&lt;p&gt;I wanted to do something for Outline, but didn’t have a huge amount of time. I had a WIP shader of an ice core to hand, so I quickly put this together. It came last in the competition, but I liked it :)&lt;/p&gt;

&lt;h2 id=&quot;tech&quot;&gt;Tech&lt;/h2&gt;

&lt;p&gt;There’s nothing particularly new here - it’s path traced glass again, but this time with the lighting set up to give nice caustics.&lt;/p&gt;

&lt;p&gt;The ice core is just a glass cylinder sliced into sections. Each section has a random colour and roughness value to produce the varied ice layers.&lt;/p&gt;

&lt;p&gt;There are also bubbles and particles within the ice. The geometry is an SDF, and the one nice trick I came up with here is the dark particles - I used &lt;code class=&quot;highlighter-rouge&quot;&gt;p = fract(p);&lt;/code&gt; to repeat space, then placed a sphere at a random position in each cell.&lt;/p&gt;

&lt;p&gt;Normally it’s important to keep the sphere inside the cell to avoid artefacts, but in this case such artefacts produce dark spots in the ice - which look like floating particles ;)&lt;/p&gt;</content><author><name></name></author><category term="demoscene" /><category term="metal" /><category term="pathtracing" /><summary type="html">Released at Outline 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data).</summary></entry><entry><title type="html">Undefined Symbol (4KB Executable Graphics)</title><link href="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/04/12/undefined-symbol.html" rel="alternate" type="text/html" title="Undefined Symbol (4KB Executable Graphics)" /><published>2020-04-12T05:46:20-05:00</published><updated>2020-04-12T05:46:20-05:00</updated><id>https://alia-traces.github.io/demoscene/metal/pathtracing/2020/04/12/undefined-symbol</id><content type="html" xml:base="https://alia-traces.github.io/demoscene/metal/pathtracing/2020/04/12/undefined-symbol.html">&lt;p&gt;&lt;img src=&quot;/images/undefined_symbol/undefined_symbol_screenshot.jpg&quot; alt=&quot;Undefined Symbol screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Released at Revision 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data).
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;

&lt;p&gt;This was my first demoscene release as Alia (but not my first scene release :) so I wanted to make something good. I’m fairly happy with how it worked out.&lt;/p&gt;

&lt;p&gt;The general plan was to make something abstract but realistically rendered, with a lot of symbolism. This isn’t something that works well in a demo competition, and it came 11th out of 16 but I want to make interesting art, not win competitions.&lt;/p&gt;

&lt;h2 id=&quot;tech&quot;&gt;Tech&lt;/h2&gt;

&lt;p&gt;It’s GPU path traced, using my own path tracer in a single Metal compute shader. This supports complex materials including glass.&lt;/p&gt;

&lt;p&gt;The executable is written in PyObjC, a highly unpleasant combination of Python and Objective C. Unfortunately there isn’t a good exe compressor for macOS, and this at least works. That fires up Metal, selects a GPU (it uses an eGPU if one is connected), then runs the shader repeatedly to accumulate samples. It stops and displays the picture when 30 seconds is up (the competition rules state 4KB and 30 seconds max).&lt;/p&gt;

&lt;p&gt;The python script is then compressed with gzip, and wrapped in a bash script that unpacks and runs it.&lt;/p&gt;

&lt;h2 id=&quot;symbolism&quot;&gt;Symbolism&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The cactus represents masculinity&lt;/li&gt;
  &lt;li&gt;The vase and flower, femininity&lt;/li&gt;
  &lt;li&gt;The arch above forms a bridge between the two sides&lt;/li&gt;
  &lt;li&gt;The colours in the glass are pink, blue and clear (white… kinda), the colours of the transgender flag&lt;/li&gt;
  &lt;li&gt;The camera looks through an open window - this is a point of view&lt;/li&gt;
  &lt;li&gt;The background objects, a sphere a cube and a torus, represent graphics and the demoscene. Naturally, they’re shiny :)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="demoscene" /><category term="metal" /><category term="pathtracing" /><summary type="html">Released at Revision 2020, 4KB Executable Graphics (a single 4KB executable file generates this image, with no external data).</summary></entry></feed>